# I feel like this one is pretty self explanatory, but it pipes all of the data to OpenAI and adds the returned summary to a file

import os
import json
import utilities
from openai import OpenAI
from dotenv import dotenv_values

config = {
    **dotenv_values("../.env")
}

client = OpenAI(
  api_key=config["OPENAI_KEY"]
)

reviews_path = "./merged_reviews"
output_path = "./summaries"


def createArticles(path, out):
        dir_list = utilities.list_files(path)
        for file in dir_list:
          print(file)
          with open(f"{path}/{file}", "r") as input_file:
              file_content = json.load(input_file)
              prompt = f'''Create an article in HTML format for the {file_content["company_type"]} {file_content["name"]} with the following requirements: 
              1. This article sub-sections should be: good, great, bad, and ugly. The content of sub-section should reflect the sentiment of the heading. The sub-section headers should be wrapped in HTML <h2></h2> tags. 
              2. Each section shall have 2 paragraphs comprised of 3-5 sentences for each paragraph. Each paragraph should be wrapped in <p></p> tags. 
              3. There shall be no identifiable information, such as the name of the reviewer.
              4. Be as detailed as possible, citing specific examples of the property management company either neglecting their duties or exceeding expectations, and any common themes such as not addressing maintenance concerns, not returning security deposits, poor communication, as well as how many times the company has replied to user reviews. 
              5. Ensure to mention either at the beginning or end of the article that these summary articles are generated by ChatGPT, and is only intended to be a tool to help them find a property management company or rental property. 
              6. When referring to the user-supplied reviews, call them "user reviews". When referring to the generated output from this request, call it "article", such as "in this article...", "this article's intent is to...", etc.
              7. The data shall be returned in a python dict object. 
              8. The python dict shall have the following keys: "summary", and "search_terms". The "summary" key will contain the HTML summary text generated by ChatGPT, and the "search_terms" would contain an array of key words and phrases extracted from the reviews contained in the keys with the _reviews suffix for a web application search feature.
              9. The "search_terms" shall contain phrases or words from the reviews, or sentiments derived from the reviews. Derived sentiments can include "good communication", "responsive to maintenance requests", or "poor com  
              10. The response shall be a single line, without markdown-style backticks.
              The data is as follows in JSON format, with the reviews contained in the "reviews" key: ### {json.dumps(file_content, ensure_ascii=True, indent=2)} ###'''
              result = client.chat.completions.create(
                model="gpt-4-1106-preview",
                messages=[
                    {"role": "system", "content": "You are a helpful assistant whose job is to summarize real company reviews to create well-balanced articles on local property management companies."},
                    {"role": "user", "content": prompt}
                ]
              )
              with open(f'{out}/{file_content["slug"]}.json', 'w') as output_file:
                  
                  json.dump({**file_content, "summary": json.loads(result.choices[0].message.content)}, output_file,  ensure_ascii=True, indent=2)
                  output_file.close()
          input_file.close()
          return

createArticles(reviews_path, output_path)